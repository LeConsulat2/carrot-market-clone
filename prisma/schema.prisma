generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  mobile_phone String? @unique
  github_id String? @unique
  avatar String? @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  sms_tokens SMSToken[]
  products Product[]
  posts Post[]
  comments Comment[]
  likes Like[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id Int @id @default(autoincrement())
  title String
  price Float
  photo String
  description String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Like {
  userId Int
  postId Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}